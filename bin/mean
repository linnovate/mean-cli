#!/usr/bin/env node

'use strict';

//Experimental MEAN CLI.
var program = require('commander'),
  opener = require('opener'),
  fs = require('fs'),
  colors = require('colors'),
  _ = require('lodash');

var progress = new Progress();
var _npm = process.platform === 'win32' ? 'npm.cmd' : 'npm';

colors.setTheme({
  input: 'grey',
  verbose: 'cyan',
  prompt: 'grey',
  info: 'green',
  data: 'grey',
  help: 'cyan',
  warn: 'yellow',
  debug: 'blue',
  error: 'red',
  httpCode: 'blue'
});

// set program version
var version = require('../package').version;
program.version(version, '-v, --version');

program
  .option('-b, --branch [type]', 'git branch')
  .option('-mn, --machine [type]', 'Specify "machine name" --machine tokens')
  .option('-g, --git', 'clone using git:// instead of https://')
  .option('--npm', 'Download MEAN Packages from NPM')
  .option('--repo [type]', 'Specify repository to install')
  .option('--author [type]', 'This is the author')
  .option('-f, --force', 'force')
  .option('--env [type]', 'Mean environment defaults to `development`');

program
  .command('init')
  .description('Create a MEAN application in the current working directory')
  .action(function(name) {
    name = (typeof name == 'object' ? 'mean' : name);
    init(name, options());
  });

program
  .command('install <module>')
  .description('Installs a MEAN module')
  .action(function(module) {
    requiresRoot(function() {
      install(module, options());
    });
  });

program
  .command('uninstall <module>')
  .description('Uninstalls a MEAN module')
  .action(function(module) {
    requiresRoot(function() {
      uninstall(module, options());
    });
  });

program
  .command('docs')
  .description('Opens MEAN documentation in your local browser')
  .action(function() {
    opener('http://www.mean.io/#!/docs');
  });

program
  .command('package <name>')
  .description('Scaffolds a new MEAN package.')
  .action(function(name) {
    requiresRoot(function() {
      ensureEmpty('./node_modules/' + name, function() {
        require('../lib/scaffold.js').packages(name, options());
      });
    });
  });

program
  .command('list')
  .description('List all installed packages ')
  .action(function(env) {
    requiresRoot(function() {
      list(options);
    });
  });

program
  .command('status')
  .description('Overall system status ')
  .action(function(env) {
    requiresRoot(function() {
      status(options());
    });
  });

program
  .command('userAddRole <email> <role>')
  .description('Assigns role to user ')
  .action(function(email, role) {
    requiresRoot(function() {
      addRole(email, role, options());
    });
  });

program
  .command('userRemoveRole <email> <role>')
  .description('Removes role from user ')
  .action(function(email, role) {
    requiresRoot(function() {
      removeRole(email, role, options());
    });
  });

program
  .command('user <email>')
  .description('List roles of specific user ')
  .action(function(email) {
    requiresRoot(function() {
      printUser(email, options());
    });
  });

program.parse(process.argv);

// print help with no args
if (program.args.length < 1) {
  program.help();
}

// if there is a command, make sure it's valid
var commands = program.commands.map(function (command) {
  return command._name;
});
if (!_.contains(commands, program.rawArgs[2])) {
  console.log('mean: `' + program.rawArgs[2] + '` is not a mean command. See `mean --help`.');
  console.log();
  process.exit(1);
}

function checkVersion() {

  var spawn = require('child_process').spawn;

  var npm = spawn(_npm, ['outdated', 'meanio', '-g', '--json']);

  npm.stderr.setEncoding('utf8');
  npm.stdout.setEncoding('utf8');

  var chunks = '';
  console.log();
  console.log('    checking meanio command line version');
  npm.on('close', function(code, signal) {

    try {
      var json = JSON.parse(chunks);
      if (json.meanio.latest && json.meanio.latest != version) {
        console.log('    meanio command line is out of date'.warn);
        console.log('    Current: ' + version + ' Latest: ' + json.meanio.latest);
      } else {
        console.log('    meanio command line at latest version: '.info + version);
      }
    } catch (e) {
      console.log(e);
    }
  });

  npm.stdout.on('data', function(data) {
    chunks += data;
  });

  npm.stderr.on('data', function(data) {
    //console.log(data);
    //errors = true;
  });
}


function options() {
  return {
    npm: program.npm,
    git: program.git,
    force: program.force,
    verbose: program.verbose,
    repo: program.repo,
    branch: program.branch,
    author: program.author,
    env: program.env || 'development'
  };
}

function printUser(email, options) {

  var config = require(process.cwd() + '/server/config/env/' + options.env + '.js');

  var MongoClient = require('mongodb').MongoClient,
    format = require('util').format;

  MongoClient.connect(config.db, function(err, db) {
    if (err) {
      console.log('    Error Connecting to database'.error);
      console.log(err);
    } else {
      console.log('    DB connecting successful!'.info);
      console.log();
      db.collection('users').find({
        email: email
      }).toArray(function(err, user) {
        console.dir(user.data);
        db.close();
      });
    }
  });
}


function addRole(email, role, options) {

  var config = require(process.cwd() + '/server/config/env/' + options.env + '.js');

  var MongoClient = require('mongodb').MongoClient,
    format = require('util').format;

  MongoClient.connect(config.db, function(err, db) {
    if (err) {
      console.log('    Error Connecting to database'.error);
      console.log(err);
    } else {
      console.log('    DB connecting successful!'.info);
      console.log();
      db.collection('users').update({
        email: email
      }, {
        $push: {
          roles: role
        }
      }, {
        w: 1,
        upsert: false,
        multi: false
      }, function(err) {
        if (err) console.log(err.message);
        else console.log('successfully updated'.info);
        db.close();
      });
    }
  });
}

function removeRole(email, role, options) {
  var config = require(process.cwd() + '/server/config/env/' + options.env + '.js');

  var MongoClient = require('mongodb').MongoClient,
    format = require('util').format;

  MongoClient.connect(config.db, function(err, db) {
    if (err) {
      console.log('    Error Connecting to database'.error);
      console.log(err);
    } else {
      console.log('    DB connecting successful!'.info);
      console.log();
      db.collection('users').update({
        email: email
      }, {
        $pull: {
          roles: role
        }
      }, {
        w: 1,
        upsert: false,
        multi: false
      }, function(err) {
        if (err) console.warn(err.message);
        else console.log('successfully updated'.info);
        db.close();

      });
    }
  });
}

function status(options) {
  var config = require(process.cwd() + '/server/config/env/' + options.env + '.js');
  console.log();
  console.log('    MEAN Status'.info);
  console.log('    -----------');
  console.log();
  loadPackageJson('./package.json', function(err, data) {
    console.log('    MEAN VERSION: ' + data.version);
    console.log();
    console.log('    MongoDB URI: ' + config.db);

    var MongoClient = require('mongodb').MongoClient,
      format = require('util').format;

    MongoClient.connect(config.db, function(err, db) {
      if (err) {
        console.log('    Error Connecting to database'.error);
        console.log(err);
      } else {
        console.log('    DB connecting successful!'.info);
        console.log();
      }
      checkVersion();
      db.close();
    });
  });
}

function init(name, options) {
  ensureEmpty(name, function() {
    cloneRepo(name, options);
  });
}

function cloneRepo(name, options) {
  options.branch = (typeof options.branch == 'string' ? options.branch : 'master');

  progress.start();

  var spawn = require('child_process').spawn;
  var repo = options.repo || 'linnovate/mean.git';
  var source = (options.git ? 'git@github.com:' : 'https://github.com/') + repo;
  var git = spawn('git', ['clone', '-b', options.branch, source, name]);
  var message = 'Cloning branch: ' + options.branch + ' into destination folder: ' + name;
  console.log(message.info);

  git.stderr.setEncoding('utf8');
  git.stdout.setEncoding('utf8');

  git.on('close', function(code, signal) {
    progress.stop();
    loadPackageJson('./' + name + '/package.json', function(err, data) {
      if (err) {
        console.log('Something went wrong. Try again or use --git flag'.warn);
        console.log('If the problem persists see past issues here: https://github.com/linnovate/mean/issues'.warn);
        console.log('Or open a new issue here https://github.com/linnovate/mean/issues/new'.warn);
        //fallback code here
        process.exit();
      }

      message = 'Version: ' + data.version + ' cloned';
      console.log(message.info);
      console.log();
      fs.readFile(__dirname + '/../img/logo.txt', function(err, data) {
        console.log(data.toString());
        console.log();
        console.log('   install dependencies:');
        console.log('     $ cd %s && npm install', name);
        console.log();
        console.log('   run the app:');
        console.log('     $ grunt');
        console.log();
        console.log('   Extra Docs at http://mean.io');
      });
    });
  });

  git.stdout.on('data', function(data) {
    console.log(data);
  });

  git.stderr.on('data', function(data) {
    console.log(data);
    //errors = true;
  });
}

function loadPackageJson(path, callback) {
  fs.readFile(path, function(err, data) {
    if (err) return callback(true, err);

    try {
      var json = JSON.parse(data.toString());
      callback(null, json);
    } catch (err) {
      return callback(true, err);
    }
  });
}

function ensureEmpty(path, callback) {
  emptyDirectory(path, function(empty) {
    if (empty || program.force) {
      callback();
    } else {
      console.log('Destination is not empty: '.warn + path);
    }
  });
}

// From express
function emptyDirectory(path, fn) {
  fs.readdir('./' + path, function(err, files) {
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

function list(options) {
  fs.readdir('./node_modules', function(err, files) {
    if (err) return console.log('No Modules. Make sure you are within a valid MEAN app'.warn);
    console.log('   MEAN Modules List:'.info);
    console.log('   -----------------');
    files.forEach(function(file) {
      loadPackageJson('./node_modules/' + file + '/package.json', function(err, data) {
        if (!err && data.mean) console.log('   ' + data.name + '@' + data.version + (data.author ? ' Author: ' + data.author.name : ''));
      });
    });
  });
}

function uninstall(module, options) {
  var spawn = require('child_process').spawn;

  var npm = spawn(_npm, ['uninstall', module]);

  console.log('Removing module: '.info + module);

  npm.stderr.setEncoding('utf8');
  npm.stdout.setEncoding('utf8');

  npm.on('close', function(code, signal) {
    console.log('   npm uninstall complete'.info);
  });

  npm.stdout.on('data', function(data) {
    console.log(data);
  });

  npm.stderr.on('data', function(data) {
    errors = true;
    console.log(data);
  });
}

function install(module, options) {
  //progress.start();
  options.branch = (typeof options.branch == 'string' ? options.branch : 'master');
  var source = 'https://github.com/linnovate/' + module + '/tarball/' + options.branch;
  var spawn = require('child_process').spawn;

  // Allow specifying specific repo
  if (options.repo) {
    source = options.repo;
  }

  // Allow installing packages from npm
  if (options.npm) {
    source = module;
  }

  var npm = spawn(_npm, ['install', source]);

  var message = 'Installing module: ' + module + ' from branch (version): ' + options.branch;

  console.log(message.info);
  console.log();

  npm.stderr.setEncoding('utf8');
  npm.stdout.setEncoding('utf8');

  npm.on('close', function(code, signal) {
    loadPackageJson('./node_modules/' + module + '/package.json', function(err, data) {
      if (err) {
        console.log('Error: npm install failed');
        return console.log(data);
      }

      message = data.name + '@' + data.version + (data.author ? ' Author: ' + data.author.name : '');

      console.log(message.info);
      console.log();
      if (!data.mean) {
        console.log();
        console.log('Warning: The module installed is not a valid MEAN module'.warn);
      }
    });

  });

  npm.stdout.on('data', function(data) {
    printNpmOutput(data);

  });

  npm.stderr.on('data', function(data) {
    printNpmOutput(data);
  });
}

function printNpmOutput(data) {
  var split = data.split(' ');
  split.forEach(function(str) {
    switch (str) {
      case 'WARN':
        process.stdout.write(str.warn + ' ');
        break;
      case '200':
      case '304':
      case 'GET':
        process.stdout.write(str.httpCode + ' ');
        break;
      case 'npm':
        process.stdout.write(str.data + ' ');
        break;
      case 'http':
        process.stdout.write(str.info + ' ');
        break;
      default:
        if (str) {
          process.stdout.write(str);
          if (str.indexOf('\n') == -1) {
            process.stdout.write(' ');
          }
        }
        break;
    }
  });
}

function requiresRoot(callback) {
  loadPackageJson(process.cwd() + '/package.json', function(err, data) {
    if (err || data.name != 'mean') {
      console.log('Invalid MEAN app or not in app root'.warn);
    } else {
      callback();
    }
  });
}

function Progress() {
  var interval, counter;

  var progress = {
    start: function() {
      counter = 0;
      interval = setInterval(printMsg, 3000);
    },
    stop: function() {
      clearInterval(interval);
    }
  };

  function printMsg() {

    switch (counter) {
      case 0:
        console.log('Use `mean --help` from command line for all CLI options');
        break;
      case 1:
        console.log('Be sure to checkout all the docs on http://mean.io');
        break;
      case 2:
        console.log('This may take a little while depending on your connection speed');
        break;
      case 15:
        console.log('Seems a bit slow. Check your internet connection...');
        break;
      default:
        console.log('Still cloning...');
        break;
    }

    counter++;
  }

  return progress;
}
